import Head from "next/head";
import { dehydrate, QueryClient, useQuery } from "@tanstack/react-query";
import styles from "../styles/Home.module.css";
import { getProduct, getProducts } from "../lib/products";
import type { GetStaticProps, GetStaticPaths } from "next";
import { useRouter } from "next/router";

export default function Product() {
  const router = useRouter();
  const id = router.query.id;
  const { data } = useQuery({ queryKey: ["products", id], queryFn: () => getProduct(id) });

  if (!data) return <p>No data</p>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <p>{data.title}dsffdf</p>
      </main>
    </div>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const products = await getProducts();

  const paths = products.map((product) => ({
    params: { id: product.id.toString() },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: "blocking" };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery(["products", params?.id], () => getProduct(params?.id));

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
